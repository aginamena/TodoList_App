import {Categories, Category, TodoItem} from "./index.js";
const addNewItem = document.querySelector("#addNewItem");
const form = document.querySelector("form");
const todos = document.querySelector("#listOfTodoItems");
const todoItemsName = document.querySelector("#todoItems");
const listOfCategories = document.querySelector("#listOfCategories");
const addNewCategory = document.querySelector("#addNewCategory");
const enterItem = document.querySelector("#enter");
addNewItem.addEventListener("click", () => {
  form.style.display = "block";
  todos.style.display = "none";
});
const cancelNewItem = document.querySelector("#cancel");
cancel.addEventListener("click", () => {
  form.style.display = "none";
  todos.style.display = "block";
  let nameOfCategory = todoItemsName.textContent.substring(15);
  displayCategoryTodoItems(nameOfCategory);
});

enterItem.addEventListener("click", () => {
  let Title = form.querySelector("[name = title]").value;
  let Description = form.querySelector("[name = Description]").value;
  let Duedate = form.querySelector("[name = dueDate]").value;
  let Priority = form.querySelector("[name = Priority]:checked")
  if(Priority != null)Priority = Priority.value;
  let CheckList= form.querySelector("[name = checkList]:checked");
  if(CheckList != null) CheckList = CheckList.value;
  let Note = form.querySelector("[name = note]").value;

  if(Title.length > 0 && Duedate.length > 0 && Priority != null
  && CheckList != null){
    let todoItem = new TodoItem(Title, Description, Duedate, Priority, CheckList, Note);
    let nameOfCategory = todoItemsName.textContent.substring(15);
    categories.getCategoryByName(nameOfCategory).addNewTodoListItem(todoItem);
    /* we close the form */
    form.style.display = "none";
    todos.style.display = "block";
    displayCategoryTodoItems(nameOfCategory);
  }

});

/* default category */
let categories = new Categories();
function createCategory(deleteButton, newCategory, isDefaultCategory){
  let newElement = document.createElement("div");
  newElement.setAttribute("onMouseOver", "this.style.border = '1px solid black'");
  newElement.setAttribute("onMouseOut", "this.style.border = '0'");
  let text = document.createElement("div");
  text.id = "text";
  text.textContent = newCategory.getName();
  newElement.appendChild(text);
  newElement.style.cssText = "padding : 10px; height : 40px;"+
  "margin-top : 10px; cursor : pointer; font-size: 25px;";
  let editImage = document.createElement("img");
  editImage.src = "images/edit.png";
  editImage.id = "editCategoryName";
  editImage.style.cssText = "width : 50px; height : 40px; position : relative; left : 350px; top : -30px;";
  newElement.appendChild(editImage);
  listOfCategories.appendChild(newElement);
  /* the delete button isn't added to the default created category. But it's added to
  the user created category */
  if(deleteButton != "noDeleteButtonAdded"){
    let deleteButton = document.createElement("img");
    deleteButton.src = "images/delete.png";
    deleteButton.style.cssText = "width : 50px; height : 40px; position : relative; left : 400px; top : -30px;";
    deleteButton.id = "delete";
    newElement.appendChild(deleteButton);
  }
  /* add the new category to the list of categories */
  if(isDefaultCategory){
    todoItemsName.textContent = "Todo Items for "+ newCategory.getName();
  }
  categories.addNewCategory(newCategory);

}
function displayCategoryTodoItems(clicked){
  let clickedCategory = categories.getCategoryByName(clicked);
  let todoList = clickedCategory.getAllTodoListItems();
  if(todoList.length == 0){
    todos.textContent = "Empty todo list";
    todos.style.cssText = "font-size : 20px; font-weight: bolder;";
  }else{
    todos.textContent = "";
    /* undo the center alignment */
      todos.style.cssText = " display : flex; flex-wrap : wrap;";
    for(let i = 0; i<todoList.length; i++){
      displayTodoItem(todoList[i]);
    }
  }
}
function displayTodoItem(todoItem){
let container = document.createElement("div");
container.style.cssText = "border : 3px solid black; padding: 10px; margin : 15px; font-size : 20px; font-weight: bolder";
let remove = document.createElement("button");
remove.innerHTML = "Remove";
remove.id = "removeTodoList";
remove.style.cssText = "background-color : red; height : 40px; color : white; margin : 10px 10px 10px 0; cursor : pointer; width : 100px;";
let edit = document.createElement("button");
edit.innerHTML = "edit";
edit.id = "editTodoList";
edit.style.cssText = "background-color : blue; color : white; height : 40px; cursor : pointer; width : 100px;";
let text = document.createElement("div");
text.innerHTML = "Title:  "+todoItem.getTitle() + "<br>"+
                "Due date: "+todoItem.getDueDate()+"<br>"+
                "Priority: "+todoItem.getPriority()+"<br>"+
                "Checkist: "+todoItem.getCheckList()+"<br>";
container.appendChild(text);
container.appendChild(remove);
container.appendChild(edit);
todos.appendChild(container);


}
/* creates default category */
createCategory("noDeleteButtonAdded", new Category("Default category"), true);

/* if the user clicks on edit, we change the name of the category
or if the user clicks on delete, we delete the category or if the
user clicks on text, we display todolist items for that category */

listOfCategories.addEventListener("click", (event) =>{
  let clicked = event.target;
  if(clicked.id == "editCategoryName"){
    let newCategoryName = window.prompt("Change name of category");
    if(newCategoryName != null && newCategoryName.length > 0){
      /* we get the text which is the previous sibling of edit */
      let previousElement = clicked.previousSibling;
      let oldCategoryName = previousElement.textContent;
      previousElement.textContent = newCategoryName;
      categories.changeCategoryName(oldCategoryName, newCategoryName);
      todoItemsName.textContent = "Todo Items for "+ newCategoryName;
    }
  }
  if(clicked.id == "delete"){
    /* we delete the clicked category and go back to the default category */
    let parentElement = clicked.parentElement;
    let firstChild = parentElement.firstChild;
    let clickedCategory = categories.getCategoryByName(firstChild.textContent);
    categories.deleteCategory(clickedCategory);
    listOfCategories.removeChild(parentElement);
    let defaultCategory = listOfCategories.children[0].textContent;
    todoItemsName.textContent = "Todo Items for "+ defaultCategory;
    displayCategoryTodoItems(defaultCategory);
  }
  if(clicked.id == "text"){
    /* when the user clicks a project, we've to show all todo items in that
    project */
    let text = clicked.textContent;
    todoItemsName.textContent = "Todo Items for "+ text;
    displayCategoryTodoItems(text);
  }

});

todos.addEventListener("click", (event) =>{
  let clickedEvent = event.target;
  let nodes = Array.prototype.slice.call(todos.children );
  let todoListIndex = nodes.indexOf( clickedEvent.parentElement);
  if(clickedEvent.id == "removeTodoList"){
    /* we get the index of the todoList item in the dom
    and remove it from the dom and display the todoList category
    in the dom*/
    let nameOfCategory = todoItemsName.textContent.substring(15);
    categories.getCategoryByName(nameOfCategory).removeTodoListItem(todoListIndex);
    todos.removeChild(clickedEvent.parentElement);
    displayCategoryTodoItems(nameOfCategory);
  }
  if(clickedEvent.id == "editTodoList"){
    /* when the user clicks on edit, the form opens for editing */
    form.style.display = "block";
    todos.style.display = "none";
    let nameOfCategory = todoItemsName.textContent.substring(15);
    let todoList = categories.getCategoryByName(nameOfCategory).getTodoListItem(todoListIndex);
    form.querySelector("[name = title]").value = todoList.getTitle();
    form.querySelector("[name = Description]").value = todoList.getDescription();
    form.querySelector("[name = dueDate]").value = todoList.getDueDate();
    form.querySelector("[value = "+todoList.getPriority() +"]").checked = true;
    form.querySelector("[value = "+todoList.getCheckList() +"]").checked = true;
    form.querySelector("[name = note]").value = todoList.getNote();

  }
});

/* adding new category to categories */

addNewCategory.addEventListener("click", ()=>{
    let newCategoryName = window.prompt("Enter new category name");
    if(newCategoryName != null && newCategoryName.length > 0){
      let newCategory = new Category(newCategoryName);
      let categoryNameExists = categories.categoryInCategories(newCategory);
      if(categoryNameExists) {
        window.alert("Every category must have a unique name");
        return;
      }
      createCategory("addDeleteButton", newCategory, false);
    }
});
